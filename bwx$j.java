/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class j
/*      */   extends bwx.p
/*      */ {
/*      */   protected int a;
/*      */   
/*      */   public j() {}
/*      */   
/*      */   public j(int ☃, Random random, bwf bwf1, eq eq1) {
/*  896 */     super(☃);
/*      */     
/*  898 */     a(eq1);
/*  899 */     this.d = a(random);
/*  900 */     this.n = bwf1;
/*  901 */     this.a = random.nextInt(5);
/*      */   }
/*      */ 
/*      */   
/*      */   protected void a(gy ☃) {
/*  906 */     super.a(☃);
/*  907 */     ☃.b("Type", this.a);
/*      */   }
/*      */ 
/*      */   
/*      */   protected void a(gy ☃, bxm bxm1) {
/*  912 */     super.a(☃, bxm1);
/*  913 */     this.a = ☃.h("Type");
/*      */   }
/*      */ 
/*      */   
/*      */   public void a(bxb ☃, List<bxb> list, Random random) {
/*  918 */     a((bwx.m)☃, list, random, 4, 1);
/*  919 */     b((bwx.m)☃, list, random, 1, 4);
/*  920 */     c((bwx.m)☃, list, random, 1, 4);
/*      */   }
/*      */   
/*      */   public static j a(List<bxb> ☃, Random random, int i, int k, int m, eq eq1, int n) {
/*  924 */     bwf bwf = bwf.a(i, k, m, -4, -1, 0, 11, 7, 11, eq1);
/*      */     
/*  926 */     if (!a(bwf) || bxb.a(☃, bwf) != null) {
/*  927 */       return null;
/*      */     }
/*      */     
/*  930 */     return new j(n, random, bwf, eq1);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/*  936 */     a(☃, bwf1, 0, 0, 0, 10, 6, 10, true, random, bwx.c());
/*      */     
/*  938 */     a(☃, random, bwf1, this.d, 4, 1, 0);
/*      */     
/*  940 */     a(☃, bwf1, 4, 1, 10, 6, 3, 10, m, m, false);
/*  941 */     a(☃, bwf1, 0, 1, 4, 0, 3, 6, m, m, false);
/*  942 */     a(☃, bwf1, 10, 1, 4, 10, 3, 6, m, m, false);
/*      */     
/*  944 */     switch (this.a) {
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */       
/*      */       default:
/* 1021 */         return true;
/*      */       case 0:
/*      */         a(☃, bct.dy.p(), 5, 1, 5, bwf1);
/*      */         a(☃, bct.dy.p(), 5, 2, 5, bwf1);
/*      */         a(☃, bct.dy.p(), 5, 3, 5, bwf1);
/*      */         a(☃, bct.cg.p().a(biv.a, eq.e), 4, 3, 5, bwf1);
/*      */         a(☃, bct.cg.p().a(biv.a, eq.f), 6, 3, 5, bwf1);
/*      */         a(☃, bct.cg.p().a(biv.a, eq.d), 5, 3, 4, bwf1);
/*      */         a(☃, bct.cg.p().a(biv.a, eq.c), 5, 3, 6, bwf1);
/*      */         a(☃, bct.bJ.p(), 4, 1, 4, bwf1);
/*      */         a(☃, bct.bJ.p(), 4, 1, 5, bwf1);
/*      */         a(☃, bct.bJ.p(), 4, 1, 6, bwf1);
/*      */         a(☃, bct.bJ.p(), 6, 1, 4, bwf1);
/*      */         a(☃, bct.bJ.p(), 6, 1, 5, bwf1);
/*      */         a(☃, bct.bJ.p(), 6, 1, 6, bwf1);
/*      */         a(☃, bct.bJ.p(), 5, 1, 4, bwf1);
/*      */         a(☃, bct.bJ.p(), 5, 1, 6, bwf1);
/*      */       case 1:
/*      */         for (i = 0; i < 5; i++) {
/*      */           a(☃, bct.dy.p(), 3, 1, 3 + i, bwf1);
/*      */           a(☃, bct.dy.p(), 7, 1, 3 + i, bwf1);
/*      */           a(☃, bct.dy.p(), 3 + i, 1, 3, bwf1);
/*      */           a(☃, bct.dy.p(), 3 + i, 1, 7, bwf1);
/*      */         } 
/*      */         a(☃, bct.dy.p(), 5, 1, 5, bwf1);
/*      */         a(☃, bct.dy.p(), 5, 2, 5, bwf1);
/*      */         a(☃, bct.dy.p(), 5, 3, 5, bwf1);
/*      */         a(☃, bct.A.p(), 5, 4, 5, bwf1);
/*      */       case 2:
/*      */         break;
/*      */     } 
/*      */     int i;
/*      */     for (i = 1; i <= 9; i++) {
/*      */       a(☃, bct.m.p(), 1, 3, i, bwf1);
/*      */       a(☃, bct.m.p(), 9, 3, i, bwf1);
/*      */     } 
/*      */     for (i = 1; i <= 9; i++) {
/*      */       a(☃, bct.m.p(), i, 3, 1, bwf1);
/*      */       a(☃, bct.m.p(), i, 3, 9, bwf1);
/*      */     } 
/*      */     a(☃, bct.m.p(), 5, 1, 4, bwf1);
/*      */     a(☃, bct.m.p(), 5, 1, 6, bwf1);
/*      */     a(☃, bct.m.p(), 5, 3, 4, bwf1);
/*      */     a(☃, bct.m.p(), 5, 3, 6, bwf1);
/*      */     a(☃, bct.m.p(), 4, 1, 5, bwf1);
/*      */     a(☃, bct.m.p(), 6, 1, 5, bwf1);
/*      */     a(☃, bct.m.p(), 4, 3, 5, bwf1);
/*      */     a(☃, bct.m.p(), 6, 3, 5, bwf1);
/*      */     for (i = 1; i <= 3; i++) {
/*      */       a(☃, bct.m.p(), 4, i, 4, bwf1);
/*      */       a(☃, bct.m.p(), 6, i, 4, bwf1);
/*      */       a(☃, bct.m.p(), 4, i, 6, bwf1);
/*      */       a(☃, bct.m.p(), 6, i, 6, bwf1);
/*      */     } 
/*      */     a(☃, bct.cf.p(), 5, 3, 5, bwf1);
/*      */     for (i = 2; i <= 8; i++) {
/*      */       a(☃, bct.n.p(), 2, 3, i, bwf1);
/*      */       a(☃, bct.n.p(), 3, 3, i, bwf1);
/*      */       if (i <= 3 || i >= 7) {
/*      */         a(☃, bct.n.p(), 4, 3, i, bwf1);
/*      */         a(☃, bct.n.p(), 5, 3, i, bwf1);
/*      */         a(☃, bct.n.p(), 6, 3, i, bwf1);
/*      */       } 
/*      */       a(☃, bct.n.p(), 7, 3, i, bwf1);
/*      */       a(☃, bct.n.p(), 8, 3, i, bwf1);
/*      */     } 
/*      */     blc blc = bct.cz.p().a(bfq.a, eq.e);
/*      */     a(☃, blc, 9, 1, 3, bwf1);
/*      */     a(☃, blc, 9, 2, 3, bwf1);
/*      */     a(☃, blc, 9, 3, 3, bwf1);
/*      */     a(☃, bwf1, random, 3, 4, 8, ccl.i);
/*      */   }
/*      */ }


/* Location:              F:\dw\server.jar!\bwx$j.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */