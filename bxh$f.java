/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class f
/*      */   extends bxh.o
/*      */ {
/*      */   public f() {}
/*      */   
/*      */   public f(bxh.k ☃, int i, Random random, bwf bwf1, eq eq1) {
/* 1343 */     super(☃, i);
/*      */     
/* 1345 */     a(eq1);
/* 1346 */     this.n = bwf1;
/*      */   }
/*      */   
/*      */   public static f a(bxh.k ☃, List<bxb> list, Random random, int i, int j, int m, eq eq1, int n) {
/* 1350 */     bwf bwf = bwf.a(i, j, m, 0, 0, 0, 9, 7, 11, eq1);
/*      */     
/* 1352 */     if (!a(bwf) || bxb.a(list, bwf) != null) {
/* 1353 */       return null;
/*      */     }
/*      */     
/* 1356 */     return new f(☃, n, random, bwf, eq1);
/*      */   }
/*      */ 
/*      */   
/*      */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 1361 */     if (this.f < 0) {
/* 1362 */       this.f = a(☃, bwf1);
/* 1363 */       if (this.f < 0) {
/* 1364 */         return true;
/*      */       }
/* 1366 */       this.n.a(0, this.f - this.n.e + 7 - 1, 0);
/*      */     } 
/*      */     
/* 1369 */     blc blc1 = a(bct.m.p());
/* 1370 */     blc blc2 = a(bct.cj.p().a(bhx.a, eq.c));
/* 1371 */     blc blc3 = a(bct.cj.p().a(bhx.a, eq.d));
/* 1372 */     blc blc4 = a(bct.cj.p().a(bhx.a, eq.e));
/* 1373 */     blc blc5 = a(bct.n.p());
/* 1374 */     blc blc6 = a(bct.J.p());
/* 1375 */     blc blc7 = a(bct.cX.p());
/*      */ 
/*      */     
/* 1378 */     a(☃, bwf1, 1, 1, 1, 7, 4, 4, bct.a.p(), bct.a.p(), false);
/* 1379 */     a(☃, bwf1, 2, 1, 6, 8, 4, 10, bct.a.p(), bct.a.p(), false);
/*      */ 
/*      */     
/* 1382 */     a(☃, bwf1, 2, 0, 6, 8, 0, 10, bct.j.p(), bct.j.p(), false);
/* 1383 */     a(☃, blc1, 6, 0, 6, bwf1);
/*      */     
/* 1385 */     blc blc8 = blc7.a(ber.a, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true));
/* 1386 */     blc blc9 = blc7.a(ber.o, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true));
/*      */     
/* 1388 */     a(☃, bwf1, 2, 1, 6, 2, 1, 9, blc8, blc8, false);
/* 1389 */     a(☃, blc7.a(ber.c, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true)), 2, 1, 10, bwf1);
/* 1390 */     a(☃, bwf1, 8, 1, 6, 8, 1, 9, blc8, blc8, false);
/* 1391 */     a(☃, blc7.a(ber.c, Boolean.valueOf(true)).a(ber.o, Boolean.valueOf(true)), 8, 1, 10, bwf1);
/* 1392 */     a(☃, bwf1, 3, 1, 10, 7, 1, 10, blc9, blc9, false);
/*      */ 
/*      */     
/* 1395 */     a(☃, bwf1, 1, 0, 1, 7, 0, 4, blc5, blc5, false);
/* 1396 */     a(☃, bwf1, 0, 0, 0, 0, 3, 5, blc1, blc1, false);
/* 1397 */     a(☃, bwf1, 8, 0, 0, 8, 3, 5, blc1, blc1, false);
/* 1398 */     a(☃, bwf1, 1, 0, 0, 7, 1, 0, blc1, blc1, false);
/* 1399 */     a(☃, bwf1, 1, 0, 5, 7, 1, 5, blc1, blc1, false);
/*      */ 
/*      */     
/* 1402 */     a(☃, bwf1, 1, 2, 0, 7, 3, 0, blc5, blc5, false);
/* 1403 */     a(☃, bwf1, 1, 2, 5, 7, 3, 5, blc5, blc5, false);
/* 1404 */     a(☃, bwf1, 0, 4, 1, 8, 4, 1, blc5, blc5, false);
/* 1405 */     a(☃, bwf1, 0, 4, 4, 8, 4, 4, blc5, blc5, false);
/* 1406 */     a(☃, bwf1, 0, 5, 2, 8, 5, 3, blc5, blc5, false);
/* 1407 */     a(☃, blc5, 0, 4, 2, bwf1);
/* 1408 */     a(☃, blc5, 0, 4, 3, bwf1);
/* 1409 */     a(☃, blc5, 8, 4, 2, bwf1);
/* 1410 */     a(☃, blc5, 8, 4, 3, bwf1);
/*      */     
/* 1412 */     blc blc10 = blc2;
/* 1413 */     blc blc11 = blc3;
/* 1414 */     blc blc12 = blc4;
/* 1415 */     for (int i = -1; i <= 2; i++) {
/* 1416 */       for (int k = 0; k <= 8; k++) {
/* 1417 */         a(☃, blc10, k, 4 + i, i, bwf1);
/* 1418 */         a(☃, blc11, k, 4 + i, 5 - i, bwf1);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1423 */     a(☃, blc6, 0, 2, 1, bwf1);
/* 1424 */     a(☃, blc6, 0, 2, 4, bwf1);
/* 1425 */     a(☃, blc6, 8, 2, 1, bwf1);
/* 1426 */     a(☃, blc6, 8, 2, 4, bwf1);
/* 1427 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 2, bwf1);
/* 1428 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 3, bwf1);
/* 1429 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 2, 2, bwf1);
/* 1430 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 2, 3, bwf1);
/* 1431 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 2, 5, bwf1);
/* 1432 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 3, 2, 5, bwf1);
/* 1433 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 5, 2, 0, bwf1);
/*      */ 
/*      */     
/* 1436 */     a(☃, blc7, 2, 1, 3, bwf1);
/* 1437 */     a(☃, bct.cG.p(), 2, 2, 3, bwf1);
/* 1438 */     a(☃, blc5, 1, 1, 4, bwf1);
/* 1439 */     a(☃, blc10, 2, 1, 4, bwf1);
/* 1440 */     a(☃, blc12, 1, 1, 3, bwf1);
/*      */ 
/*      */     
/* 1443 */     blc blc13 = bct.bJ.p().a(bhl.a, bmp.c);
/* 1444 */     a(☃, bwf1, 5, 0, 1, 7, 0, 3, blc13, blc13, false);
/* 1445 */     a(☃, blc13, 6, 1, 1, bwf1);
/* 1446 */     a(☃, blc13, 6, 1, 2, bwf1);
/*      */ 
/*      */     
/* 1449 */     a(☃, bct.a.p(), 2, 1, 0, bwf1);
/* 1450 */     a(☃, bct.a.p(), 2, 2, 0, bwf1);
/* 1451 */     a(☃, eq.c, 2, 3, 1, bwf1);
/* 1452 */     a(☃, bwf1, random, 2, 1, 0, eq.c);
/* 1453 */     if (a(☃, 2, 0, -1, bwf1).f() && !a(☃, 2, -1, -1, bwf1).f()) {
/* 1454 */       a(☃, blc10, 2, 0, -1, bwf1);
/* 1455 */       if (a(☃, 2, -1, -1, bwf1).c() == bct.if) {
/* 1456 */         a(☃, bct.i.p(), 2, -1, -1, bwf1);
/*      */       }
/*      */     } 
/*      */ 
/*      */     
/* 1461 */     a(☃, bct.a.p(), 6, 1, 5, bwf1);
/* 1462 */     a(☃, bct.a.p(), 6, 2, 5, bwf1);
/* 1463 */     a(☃, eq.d, 6, 3, 4, bwf1);
/* 1464 */     a(☃, bwf1, random, 6, 1, 5, eq.d);
/*      */     
/* 1466 */     for (int j = 0; j < 5; j++) {
/* 1467 */       for (int k = 0; k < 9; k++) {
/* 1468 */         a(☃, k, 7, j, bwf1);
/* 1469 */         b(☃, blc1, k, -1, j, bwf1);
/*      */       } 
/*      */     } 
/*      */     
/* 1473 */     a(☃, bwf1, 4, 1, 2, 2);
/*      */     
/* 1475 */     return true;
/*      */   }
/*      */ 
/*      */   
/*      */   protected int c(int ☃, int i) {
/* 1480 */     if (☃ == 0) {
/* 1481 */       return 4;
/*      */     }
/* 1483 */     return super.c(☃, i);
/*      */   }
/*      */ }


/* Location:              F:\dw\server.jar!\bxh$f.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */