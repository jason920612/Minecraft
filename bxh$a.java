/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class a
/*      */   extends bxh.o
/*      */ {
/*      */   public a() {}
/*      */   
/*      */   public a(bxh.k ☃, int i, Random random, bwf bwf1, eq eq1) {
/* 1067 */     super(☃, i);
/*      */     
/* 1069 */     a(eq1);
/* 1070 */     this.n = bwf1;
/*      */   }
/*      */   
/*      */   public static a a(bxh.k ☃, List<bxb> list, Random random, int i, int j, int m, eq eq1, int n) {
/* 1074 */     bwf bwf = bwf.a(i, j, m, 0, 0, 0, 9, 9, 6, eq1);
/*      */     
/* 1076 */     if (!a(bwf) || bxb.a(list, bwf) != null) {
/* 1077 */       return null;
/*      */     }
/*      */     
/* 1080 */     return new a(☃, n, random, bwf, eq1);
/*      */   }
/*      */ 
/*      */   
/*      */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 1085 */     if (this.f < 0) {
/* 1086 */       this.f = a(☃, bwf1);
/* 1087 */       if (this.f < 0) {
/* 1088 */         return true;
/*      */       }
/* 1090 */       this.n.a(0, this.f - this.n.e + 9 - 1, 0);
/*      */     } 
/*      */     
/* 1093 */     blc blc1 = a(bct.m.p());
/* 1094 */     blc blc2 = a(bct.cj.p().a(bhx.a, eq.c));
/* 1095 */     blc blc3 = a(bct.cj.p().a(bhx.a, eq.d));
/* 1096 */     blc blc4 = a(bct.cj.p().a(bhx.a, eq.f));
/* 1097 */     blc blc5 = a(bct.n.p());
/* 1098 */     blc blc6 = a(bct.cB.p().a(bhx.a, eq.c));
/* 1099 */     blc blc7 = a(bct.cX.p());
/*      */ 
/*      */     
/* 1102 */     a(☃, bwf1, 1, 1, 1, 7, 5, 4, bct.a.p(), bct.a.p(), false);
/*      */ 
/*      */     
/* 1105 */     a(☃, bwf1, 0, 0, 0, 8, 0, 5, blc1, blc1, false);
/*      */     
/* 1107 */     a(☃, bwf1, 0, 5, 0, 8, 5, 5, blc1, blc1, false);
/* 1108 */     a(☃, bwf1, 0, 6, 1, 8, 6, 4, blc1, blc1, false);
/* 1109 */     a(☃, bwf1, 0, 7, 2, 8, 7, 3, blc1, blc1, false);
/* 1110 */     for (int i = -1; i <= 2; i++) {
/* 1111 */       for (int k = 0; k <= 8; k++) {
/* 1112 */         a(☃, blc2, k, 6 + i, i, bwf1);
/* 1113 */         a(☃, blc3, k, 6 + i, 5 - i, bwf1);
/*      */       } 
/*      */     } 
/*      */ 
/*      */     
/* 1118 */     a(☃, bwf1, 0, 1, 0, 0, 1, 5, blc1, blc1, false);
/* 1119 */     a(☃, bwf1, 1, 1, 5, 8, 1, 5, blc1, blc1, false);
/* 1120 */     a(☃, bwf1, 8, 1, 0, 8, 1, 4, blc1, blc1, false);
/* 1121 */     a(☃, bwf1, 2, 1, 0, 7, 1, 0, blc1, blc1, false);
/* 1122 */     a(☃, bwf1, 0, 2, 0, 0, 4, 0, blc1, blc1, false);
/* 1123 */     a(☃, bwf1, 0, 2, 5, 0, 4, 5, blc1, blc1, false);
/* 1124 */     a(☃, bwf1, 8, 2, 5, 8, 4, 5, blc1, blc1, false);
/* 1125 */     a(☃, bwf1, 8, 2, 0, 8, 4, 0, blc1, blc1, false);
/*      */ 
/*      */     
/* 1128 */     a(☃, bwf1, 0, 2, 1, 0, 4, 4, blc5, blc5, false);
/* 1129 */     a(☃, bwf1, 1, 2, 5, 7, 4, 5, blc5, blc5, false);
/* 1130 */     a(☃, bwf1, 8, 2, 1, 8, 4, 4, blc5, blc5, false);
/* 1131 */     a(☃, bwf1, 1, 2, 0, 7, 4, 0, blc5, blc5, false);
/*      */ 
/*      */     
/* 1134 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 4, 2, 0, bwf1);
/* 1135 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 5, 2, 0, bwf1);
/* 1136 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 6, 2, 0, bwf1);
/* 1137 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 4, 3, 0, bwf1);
/* 1138 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 5, 3, 0, bwf1);
/* 1139 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 6, 3, 0, bwf1);
/* 1140 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 2, bwf1);
/* 1141 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 3, bwf1);
/* 1142 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 3, 2, bwf1);
/* 1143 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 3, 3, bwf1);
/* 1144 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 2, 2, bwf1);
/* 1145 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 2, 3, bwf1);
/* 1146 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 3, 2, bwf1);
/* 1147 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 8, 3, 3, bwf1);
/* 1148 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 2, 5, bwf1);
/* 1149 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 3, 2, 5, bwf1);
/* 1150 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 5, 2, 5, bwf1);
/* 1151 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 6, 2, 5, bwf1);
/*      */ 
/*      */     
/* 1154 */     a(☃, bwf1, 1, 4, 1, 7, 4, 1, blc5, blc5, false);
/* 1155 */     a(☃, bwf1, 1, 4, 4, 7, 4, 4, blc5, blc5, false);
/* 1156 */     a(☃, bwf1, 1, 3, 4, 7, 3, 4, bct.cc.p(), bct.cc.p(), false);
/*      */ 
/*      */     
/* 1159 */     a(☃, blc5, 7, 1, 4, bwf1);
/* 1160 */     a(☃, blc4, 7, 1, 3, bwf1);
/* 1161 */     blc blc8 = blc2;
/* 1162 */     a(☃, blc8, 6, 1, 4, bwf1);
/* 1163 */     a(☃, blc8, 5, 1, 4, bwf1);
/* 1164 */     a(☃, blc8, 4, 1, 4, bwf1);
/* 1165 */     a(☃, blc8, 3, 1, 4, bwf1);
/*      */ 
/*      */     
/* 1168 */     a(☃, blc7, 6, 1, 3, bwf1);
/* 1169 */     a(☃, bct.cG.p(), 6, 2, 3, bwf1);
/* 1170 */     a(☃, blc7, 4, 1, 3, bwf1);
/* 1171 */     a(☃, bct.cG.p(), 4, 2, 3, bwf1);
/* 1172 */     a(☃, bct.co.p(), 7, 1, 1, bwf1);
/*      */ 
/*      */     
/* 1175 */     a(☃, bct.a.p(), 1, 1, 0, bwf1);
/* 1176 */     a(☃, bct.a.p(), 1, 2, 0, bwf1);
/* 1177 */     a(☃, bwf1, random, 1, 1, 0, eq.c);
/* 1178 */     if (a(☃, 1, 0, -1, bwf1).f() && !a(☃, 1, -1, -1, bwf1).f()) {
/* 1179 */       a(☃, blc6, 1, 0, -1, bwf1);
/* 1180 */       if (a(☃, 1, -1, -1, bwf1).c() == bct.if) {
/* 1181 */         a(☃, bct.i.p(), 1, -1, -1, bwf1);
/*      */       }
/*      */     } 
/*      */     
/* 1185 */     for (int j = 0; j < 6; j++) {
/* 1186 */       for (int k = 0; k < 9; k++) {
/* 1187 */         a(☃, k, 9, j, bwf1);
/* 1188 */         b(☃, blc1, k, -1, j, bwf1);
/*      */       } 
/*      */     } 
/*      */     
/* 1192 */     a(☃, bwf1, 2, 1, 2, 1);
/*      */     
/* 1194 */     return true;
/*      */   }
/*      */ 
/*      */   
/*      */   protected int c(int ☃, int i) {
/* 1199 */     return 1;
/*      */   }
/*      */ }


/* Location:              F:\dw\server.jar!\bxh$a.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */