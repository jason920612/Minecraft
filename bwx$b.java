/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class b
/*     */   extends bwx.p
/*     */ {
/*     */   private int a;
/*     */   
/*     */   public b() {}
/*     */   
/*     */   public b(int ☃, Random random, bwf bwf1, eq eq1) {
/* 376 */     super(☃);
/*     */     
/* 378 */     a(eq1);
/* 379 */     this.n = bwf1;
/* 380 */     this.a = (eq1 == eq.c || eq1 == eq.d) ? bwf1.e() : bwf1.c();
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃) {
/* 385 */     super.a(☃);
/* 386 */     ☃.b("Steps", this.a);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃, bxm bxm1) {
/* 391 */     super.a(☃, bxm1);
/* 392 */     this.a = ☃.h("Steps");
/*     */   }
/*     */   
/*     */   public static bwf a(List<bxb> ☃, Random random, int i, int j, int k, eq eq1) {
/* 396 */     int m = 3;
/*     */     
/* 398 */     bwf bwf = bwf.a(i, j, k, -1, -1, 0, 5, 5, 4, eq1);
/*     */     
/* 400 */     bxb bxb = bxb.a(☃, bwf);
/* 401 */     if (bxb == null)
/*     */     {
/* 403 */       return null;
/*     */     }
/*     */     
/* 406 */     if ((bxb.d()).b == bwf.b)
/*     */     {
/* 408 */       for (int n = 3; n >= 1; n--) {
/* 409 */         bwf = bwf.a(i, j, k, -1, -1, 0, 5, 5, n - 1, eq1);
/* 410 */         if (!bxb.d().a(bwf))
/*     */         {
/*     */           
/* 413 */           return bwf.a(i, j, k, -1, -1, 0, 5, 5, n, eq1);
/*     */         }
/*     */       } 
/*     */     }
/*     */     
/* 418 */     return null;
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 424 */     for (int i = 0; i < this.a; i++) {
/*     */       
/* 426 */       a(☃, bct.dy.p(), 0, 0, i, bwf1);
/* 427 */       a(☃, bct.dy.p(), 1, 0, i, bwf1);
/* 428 */       a(☃, bct.dy.p(), 2, 0, i, bwf1);
/* 429 */       a(☃, bct.dy.p(), 3, 0, i, bwf1);
/* 430 */       a(☃, bct.dy.p(), 4, 0, i, bwf1);
/*     */       
/* 432 */       for (int j = 1; j <= 3; j++) {
/* 433 */         a(☃, bct.dy.p(), 0, j, i, bwf1);
/* 434 */         a(☃, bct.jI.p(), 1, j, i, bwf1);
/* 435 */         a(☃, bct.jI.p(), 2, j, i, bwf1);
/* 436 */         a(☃, bct.jI.p(), 3, j, i, bwf1);
/* 437 */         a(☃, bct.dy.p(), 4, j, i, bwf1);
/*     */       } 
/*     */       
/* 440 */       a(☃, bct.dy.p(), 0, 4, i, bwf1);
/* 441 */       a(☃, bct.dy.p(), 1, 4, i, bwf1);
/* 442 */       a(☃, bct.dy.p(), 2, 4, i, bwf1);
/* 443 */       a(☃, bct.dy.p(), 3, 4, i, bwf1);
/* 444 */       a(☃, bct.dy.p(), 4, 4, i, bwf1);
/*     */     } 
/*     */     
/* 447 */     return true;
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bwx$b.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */