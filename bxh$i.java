/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class i
/*      */   extends bxh.o
/*      */ {
/*      */   public i() {}
/*      */   
/*      */   public i(bxh.k ☃, int j, Random random, bwf bwf1, eq eq1) {
/*  922 */     super(☃, j);
/*      */     
/*  924 */     a(eq1);
/*  925 */     this.n = bwf1;
/*      */   }
/*      */   
/*      */   public static i a(bxh.k ☃, List<bxb> list, Random random, int j, int m, int n, eq eq1, int i1) {
/*  929 */     bwf bwf = bwf.a(j, m, n, 0, 0, 0, 5, 12, 9, eq1);
/*      */     
/*  931 */     if (!a(bwf) || bxb.a(list, bwf) != null) {
/*  932 */       return null;
/*      */     }
/*      */     
/*  935 */     return new i(☃, i1, random, bwf, eq1);
/*      */   }
/*      */ 
/*      */   
/*      */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/*  940 */     if (this.f < 0) {
/*  941 */       this.f = a(☃, bwf1);
/*  942 */       if (this.f < 0) {
/*  943 */         return true;
/*      */       }
/*  945 */       this.n.a(0, this.f - this.n.e + 12 - 1, 0);
/*      */     } 
/*      */     
/*  948 */     blc blc1 = bct.m.p();
/*  949 */     blc blc2 = a(bct.cB.p().a(bhx.a, eq.c));
/*  950 */     blc blc3 = a(bct.cB.p().a(bhx.a, eq.e));
/*  951 */     blc blc4 = a(bct.cB.p().a(bhx.a, eq.f));
/*      */ 
/*      */     
/*  954 */     a(☃, bwf1, 1, 1, 1, 3, 3, 7, bct.a.p(), bct.a.p(), false);
/*  955 */     a(☃, bwf1, 1, 5, 1, 3, 9, 3, bct.a.p(), bct.a.p(), false);
/*      */ 
/*      */     
/*  958 */     a(☃, bwf1, 1, 0, 0, 3, 0, 8, blc1, blc1, false);
/*      */ 
/*      */     
/*  961 */     a(☃, bwf1, 1, 1, 0, 3, 10, 0, blc1, blc1, false);
/*      */     
/*  963 */     a(☃, bwf1, 0, 1, 1, 0, 10, 3, blc1, blc1, false);
/*      */     
/*  965 */     a(☃, bwf1, 4, 1, 1, 4, 10, 3, blc1, blc1, false);
/*      */     
/*  967 */     a(☃, bwf1, 0, 0, 4, 0, 4, 7, blc1, blc1, false);
/*      */     
/*  969 */     a(☃, bwf1, 4, 0, 4, 4, 4, 7, blc1, blc1, false);
/*      */     
/*  971 */     a(☃, bwf1, 1, 1, 8, 3, 4, 8, blc1, blc1, false);
/*      */     
/*  973 */     a(☃, bwf1, 1, 5, 4, 3, 10, 4, blc1, blc1, false);
/*      */ 
/*      */     
/*  976 */     a(☃, bwf1, 1, 5, 5, 3, 5, 7, blc1, blc1, false);
/*      */     
/*  978 */     a(☃, bwf1, 0, 9, 0, 4, 9, 4, blc1, blc1, false);
/*      */     
/*  980 */     a(☃, bwf1, 0, 4, 0, 4, 4, 4, blc1, blc1, false);
/*  981 */     a(☃, blc1, 0, 11, 2, bwf1);
/*  982 */     a(☃, blc1, 4, 11, 2, bwf1);
/*  983 */     a(☃, blc1, 2, 11, 0, bwf1);
/*  984 */     a(☃, blc1, 2, 11, 4, bwf1);
/*      */ 
/*      */     
/*  987 */     a(☃, blc1, 1, 1, 6, bwf1);
/*  988 */     a(☃, blc1, 1, 1, 7, bwf1);
/*  989 */     a(☃, blc1, 2, 1, 7, bwf1);
/*  990 */     a(☃, blc1, 3, 1, 6, bwf1);
/*  991 */     a(☃, blc1, 3, 1, 7, bwf1);
/*      */     
/*  993 */     a(☃, blc2, 1, 1, 5, bwf1);
/*  994 */     a(☃, blc2, 2, 1, 6, bwf1);
/*  995 */     a(☃, blc2, 3, 1, 5, bwf1);
/*  996 */     a(☃, blc3, 1, 2, 7, bwf1);
/*  997 */     a(☃, blc4, 3, 2, 7, bwf1);
/*      */ 
/*      */     
/* 1000 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 2, bwf1);
/* 1001 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 3, 2, bwf1);
/* 1002 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 2, 2, bwf1);
/* 1003 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 3, 2, bwf1);
/* 1004 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 6, 2, bwf1);
/* 1005 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 7, 2, bwf1);
/* 1006 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 6, 2, bwf1);
/* 1007 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 7, 2, bwf1);
/* 1008 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 6, 0, bwf1);
/* 1009 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 7, 0, bwf1);
/* 1010 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 6, 4, bwf1);
/* 1011 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 7, 4, bwf1);
/* 1012 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 3, 6, bwf1);
/* 1013 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 3, 6, bwf1);
/* 1014 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 3, 8, bwf1);
/*      */ 
/*      */     
/* 1017 */     a(☃, eq.d, 2, 4, 7, bwf1);
/* 1018 */     a(☃, eq.f, 1, 4, 6, bwf1);
/* 1019 */     a(☃, eq.e, 3, 4, 6, bwf1);
/* 1020 */     a(☃, eq.c, 2, 4, 5, bwf1);
/*      */ 
/*      */     
/* 1023 */     blc blc5 = bct.cz.p().a(bfq.a, eq.e); int j;
/* 1024 */     for (j = 1; j <= 9; j++) {
/* 1025 */       a(☃, blc5, 3, j, 3, bwf1);
/*      */     }
/*      */ 
/*      */     
/* 1029 */     a(☃, bct.a.p(), 2, 1, 0, bwf1);
/* 1030 */     a(☃, bct.a.p(), 2, 2, 0, bwf1);
/* 1031 */     a(☃, bwf1, random, 2, 1, 0, eq.c);
/* 1032 */     if (a(☃, 2, 0, -1, bwf1).f() && !a(☃, 2, -1, -1, bwf1).f()) {
/* 1033 */       a(☃, blc2, 2, 0, -1, bwf1);
/* 1034 */       if (a(☃, 2, -1, -1, bwf1).c() == bct.if) {
/* 1035 */         a(☃, bct.i.p(), 2, -1, -1, bwf1);
/*      */       }
/*      */     } 
/*      */     
/* 1039 */     for (j = 0; j < 9; j++) {
/* 1040 */       for (int k = 0; k < 5; k++) {
/* 1041 */         a(☃, k, 12, j, bwf1);
/* 1042 */         b(☃, blc1, k, -1, j, bwf1);
/*      */       } 
/*      */     } 
/*      */     
/* 1046 */     a(☃, bwf1, 2, 1, 2, 1);
/*      */     
/* 1048 */     return true;
/*      */   }
/*      */ 
/*      */   
/*      */   protected int c(int ☃, int j) {
/* 1053 */     return 2;
/*      */   }
/*      */ }


/* Location:              F:\dw\server.jar!\bxh$i.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */