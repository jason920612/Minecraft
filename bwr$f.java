/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class f
/*     */   extends bwr.m
/*     */ {
/*     */   public f() {}
/*     */   
/*     */   public f(int ☃, Random random, bwf bwf1, eq eq1) {
/* 845 */     super(☃);
/*     */     
/* 847 */     a(eq1);
/* 848 */     this.n = bwf1;
/*     */   }
/*     */ 
/*     */   
/*     */   public void a(bxb ☃, List<bxb> list, Random random) {
/* 853 */     a((bwr.q)☃, list, random, 5, 3, true);
/*     */   }
/*     */   
/*     */   public static f a(List<bxb> ☃, Random random, int i, int j, int k, eq eq1, int n) {
/* 857 */     bwf bwf = bwf.a(i, j, k, -5, -3, 0, 13, 14, 13, eq1);
/*     */     
/* 859 */     if (!a(bwf) || bxb.a(☃, bwf) != null) {
/* 860 */       return null;
/*     */     }
/*     */     
/* 863 */     return new f(n, random, bwf, eq1);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 869 */     a(☃, bwf1, 0, 3, 0, 12, 4, 12, bct.dX.p(), bct.dX.p(), false);
/*     */     
/* 871 */     a(☃, bwf1, 0, 5, 0, 12, 13, 12, bct.a.p(), bct.a.p(), false);
/*     */ 
/*     */     
/* 874 */     a(☃, bwf1, 0, 5, 0, 1, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 875 */     a(☃, bwf1, 11, 5, 0, 12, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 876 */     a(☃, bwf1, 2, 5, 11, 4, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 877 */     a(☃, bwf1, 8, 5, 11, 10, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 878 */     a(☃, bwf1, 5, 9, 11, 7, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 879 */     a(☃, bwf1, 2, 5, 0, 4, 12, 1, bct.dX.p(), bct.dX.p(), false);
/* 880 */     a(☃, bwf1, 8, 5, 0, 10, 12, 1, bct.dX.p(), bct.dX.p(), false);
/* 881 */     a(☃, bwf1, 5, 9, 0, 7, 12, 1, bct.dX.p(), bct.dX.p(), false);
/*     */ 
/*     */     
/* 884 */     a(☃, bwf1, 2, 11, 2, 10, 12, 10, bct.dX.p(), bct.dX.p(), false);
/*     */ 
/*     */     
/* 887 */     a(☃, bwf1, 5, 8, 0, 7, 8, 0, bct.dY.p(), bct.dY.p(), false);
/*     */     
/* 889 */     blc blc1 = bct.dY.p().a(ber.o, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true));
/* 890 */     blc blc2 = bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true));
/*     */     
/*     */     int i;
/* 893 */     for (i = 1; i <= 11; i += 2) {
/* 894 */       a(☃, bwf1, i, 10, 0, i, 11, 0, blc1, blc1, false);
/* 895 */       a(☃, bwf1, i, 10, 12, i, 11, 12, blc1, blc1, false);
/* 896 */       a(☃, bwf1, 0, 10, i, 0, 11, i, blc2, blc2, false);
/* 897 */       a(☃, bwf1, 12, 10, i, 12, 11, i, blc2, blc2, false);
/* 898 */       a(☃, bct.dX.p(), i, 13, 0, bwf1);
/* 899 */       a(☃, bct.dX.p(), i, 13, 12, bwf1);
/* 900 */       a(☃, bct.dX.p(), 0, 13, i, bwf1);
/* 901 */       a(☃, bct.dX.p(), 12, 13, i, bwf1);
/* 902 */       if (i != 11) {
/* 903 */         a(☃, blc1, i + 1, 13, 0, bwf1);
/* 904 */         a(☃, blc1, i + 1, 13, 12, bwf1);
/* 905 */         a(☃, blc2, 0, 13, i + 1, bwf1);
/* 906 */         a(☃, blc2, 12, 13, i + 1, bwf1);
/*     */       } 
/*     */     } 
/* 909 */     a(☃, bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true)), 0, 13, 0, bwf1);
/* 910 */     a(☃, bct.dY.p().a(ber.c, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true)), 0, 13, 12, bwf1);
/* 911 */     a(☃, bct.dY.p().a(ber.c, Boolean.valueOf(true)).a(ber.o, Boolean.valueOf(true)), 12, 13, 12, bwf1);
/* 912 */     a(☃, bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.o, Boolean.valueOf(true)), 12, 13, 0, bwf1);
/*     */ 
/*     */     
/* 915 */     for (i = 3; i <= 9; i += 2) {
/* 916 */       a(☃, bwf1, 1, 7, i, 1, 8, i, blc2.a(ber.o, Boolean.valueOf(true)), blc2.a(ber.o, Boolean.valueOf(true)), false);
/* 917 */       a(☃, bwf1, 11, 7, i, 11, 8, i, blc2.a(ber.b, Boolean.valueOf(true)), blc2.a(ber.b, Boolean.valueOf(true)), false);
/*     */     } 
/*     */ 
/*     */     
/* 921 */     a(☃, bwf1, 4, 2, 0, 8, 2, 12, bct.dX.p(), bct.dX.p(), false);
/* 922 */     a(☃, bwf1, 0, 2, 4, 12, 2, 8, bct.dX.p(), bct.dX.p(), false);
/*     */     
/* 924 */     a(☃, bwf1, 4, 0, 0, 8, 1, 3, bct.dX.p(), bct.dX.p(), false);
/* 925 */     a(☃, bwf1, 4, 0, 9, 8, 1, 12, bct.dX.p(), bct.dX.p(), false);
/* 926 */     a(☃, bwf1, 0, 0, 4, 3, 1, 8, bct.dX.p(), bct.dX.p(), false);
/* 927 */     a(☃, bwf1, 9, 0, 4, 12, 1, 8, bct.dX.p(), bct.dX.p(), false);
/*     */     
/* 929 */     for (i = 4; i <= 8; i++) {
/* 930 */       for (int j = 0; j <= 2; j++) {
/* 931 */         b(☃, bct.dX.p(), i, -1, j, bwf1);
/* 932 */         b(☃, bct.dX.p(), i, -1, 12 - j, bwf1);
/*     */       } 
/*     */     } 
/* 935 */     for (i = 0; i <= 2; i++) {
/* 936 */       for (int j = 4; j <= 8; j++) {
/* 937 */         b(☃, bct.dX.p(), i, -1, j, bwf1);
/* 938 */         b(☃, bct.dX.p(), 12 - i, -1, j, bwf1);
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 943 */     a(☃, bwf1, 5, 5, 5, 7, 5, 7, bct.dX.p(), bct.dX.p(), false);
/* 944 */     a(☃, bwf1, 6, 1, 6, 6, 4, 6, bct.a.p(), bct.a.p(), false);
/* 945 */     a(☃, bct.dX.p(), 6, 0, 6, bwf1);
/* 946 */     a(☃, bct.C.p(), 6, 5, 6, bwf1);
/*     */     
/* 948 */     el el = new el(a(6, 6), d(5), b(6, 6));
/* 949 */     if (bwf1.b(el)) {
/* 950 */       ☃.I().a(el, byy.e, 0);
/*     */     }
/*     */     
/* 953 */     return true;
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bwr$f.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */