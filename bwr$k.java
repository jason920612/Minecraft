/*      */ import java.util.List;
/*      */ import java.util.Random;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ public class k
/*      */   extends bwr.m
/*      */ {
/*      */   public k() {}
/*      */   
/*      */   public k(int ☃, Random random, bwf bwf1, eq eq1) {
/*  967 */     super(☃);
/*      */     
/*  969 */     a(eq1);
/*  970 */     this.n = bwf1;
/*      */   }
/*      */ 
/*      */   
/*      */   public void a(bxb ☃, List<bxb> list, Random random) {
/*  975 */     a((bwr.q)☃, list, random, 5, 3, true);
/*  976 */     a((bwr.q)☃, list, random, 5, 11, true);
/*      */   }
/*      */   
/*      */   public static k a(List<bxb> ☃, Random random, int i, int j, int n, eq eq1, int i1) {
/*  980 */     bwf bwf = bwf.a(i, j, n, -5, -3, 0, 13, 14, 13, eq1);
/*      */     
/*  982 */     if (!a(bwf) || bxb.a(☃, bwf) != null) {
/*  983 */       return null;
/*      */     }
/*      */     
/*  986 */     return new k(i1, random, bwf, eq1);
/*      */   }
/*      */ 
/*      */ 
/*      */   
/*      */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/*  992 */     a(☃, bwf1, 0, 3, 0, 12, 4, 12, bct.dX.p(), bct.dX.p(), false);
/*      */     
/*  994 */     a(☃, bwf1, 0, 5, 0, 12, 13, 12, bct.a.p(), bct.a.p(), false);
/*      */ 
/*      */     
/*  997 */     a(☃, bwf1, 0, 5, 0, 1, 12, 12, bct.dX.p(), bct.dX.p(), false);
/*  998 */     a(☃, bwf1, 11, 5, 0, 12, 12, 12, bct.dX.p(), bct.dX.p(), false);
/*  999 */     a(☃, bwf1, 2, 5, 11, 4, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 1000 */     a(☃, bwf1, 8, 5, 11, 10, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 1001 */     a(☃, bwf1, 5, 9, 11, 7, 12, 12, bct.dX.p(), bct.dX.p(), false);
/* 1002 */     a(☃, bwf1, 2, 5, 0, 4, 12, 1, bct.dX.p(), bct.dX.p(), false);
/* 1003 */     a(☃, bwf1, 8, 5, 0, 10, 12, 1, bct.dX.p(), bct.dX.p(), false);
/* 1004 */     a(☃, bwf1, 5, 9, 0, 7, 12, 1, bct.dX.p(), bct.dX.p(), false);
/*      */ 
/*      */     
/* 1007 */     a(☃, bwf1, 2, 11, 2, 10, 12, 10, bct.dX.p(), bct.dX.p(), false);
/*      */     
/* 1009 */     blc blc1 = bct.dY.p().a(ber.o, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true));
/* 1010 */     blc blc2 = bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true));
/* 1011 */     blc blc3 = blc2.a(ber.o, Boolean.valueOf(true));
/* 1012 */     blc blc4 = blc2.a(ber.b, Boolean.valueOf(true));
/*      */     
/*      */     int i;
/* 1015 */     for (i = 1; i <= 11; i += 2) {
/* 1016 */       a(☃, bwf1, i, 10, 0, i, 11, 0, blc1, blc1, false);
/* 1017 */       a(☃, bwf1, i, 10, 12, i, 11, 12, blc1, blc1, false);
/* 1018 */       a(☃, bwf1, 0, 10, i, 0, 11, i, blc2, blc2, false);
/* 1019 */       a(☃, bwf1, 12, 10, i, 12, 11, i, blc2, blc2, false);
/* 1020 */       a(☃, bct.dX.p(), i, 13, 0, bwf1);
/* 1021 */       a(☃, bct.dX.p(), i, 13, 12, bwf1);
/* 1022 */       a(☃, bct.dX.p(), 0, 13, i, bwf1);
/* 1023 */       a(☃, bct.dX.p(), 12, 13, i, bwf1);
/* 1024 */       if (i != 11) {
/* 1025 */         a(☃, blc1, i + 1, 13, 0, bwf1);
/* 1026 */         a(☃, blc1, i + 1, 13, 12, bwf1);
/* 1027 */         a(☃, blc2, 0, 13, i + 1, bwf1);
/* 1028 */         a(☃, blc2, 12, 13, i + 1, bwf1);
/*      */       } 
/*      */     } 
/* 1031 */     a(☃, bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true)), 0, 13, 0, bwf1);
/* 1032 */     a(☃, bct.dY.p().a(ber.c, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true)), 0, 13, 12, bwf1);
/* 1033 */     a(☃, bct.dY.p().a(ber.c, Boolean.valueOf(true)).a(ber.o, Boolean.valueOf(true)), 12, 13, 12, bwf1);
/* 1034 */     a(☃, bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.o, Boolean.valueOf(true)), 12, 13, 0, bwf1);
/*      */ 
/*      */     
/* 1037 */     for (i = 3; i <= 9; i += 2) {
/* 1038 */       a(☃, bwf1, 1, 7, i, 1, 8, i, blc3, blc3, false);
/* 1039 */       a(☃, bwf1, 11, 7, i, 11, 8, i, blc4, blc4, false);
/*      */     } 
/*      */ 
/*      */     
/* 1043 */     blc blc5 = bct.dZ.p().a(bhx.a, eq.c); int j;
/* 1044 */     for (j = 0; j <= 6; j++) {
/* 1045 */       int i1 = j + 4;
/* 1046 */       for (int i2 = 5; i2 <= 7; i2++) {
/* 1047 */         a(☃, blc5, i2, 5 + j, i1, bwf1);
/*      */       }
/* 1049 */       if (i1 >= 5 && i1 <= 8) {
/* 1050 */         a(☃, bwf1, 5, 5, i1, 7, j + 4, i1, bct.dX.p(), bct.dX.p(), false);
/* 1051 */       } else if (i1 >= 9 && i1 <= 10) {
/* 1052 */         a(☃, bwf1, 5, 8, i1, 7, j + 4, i1, bct.dX.p(), bct.dX.p(), false);
/*      */       } 
/* 1054 */       if (j >= 1) {
/* 1055 */         a(☃, bwf1, 5, 6 + j, i1, 7, 9 + j, i1, bct.a.p(), bct.a.p(), false);
/*      */       }
/*      */     } 
/* 1058 */     for (j = 5; j <= 7; j++) {
/* 1059 */       a(☃, blc5, j, 12, 11, bwf1);
/*      */     }
/* 1061 */     a(☃, bwf1, 5, 6, 7, 5, 7, 7, blc4, blc4, false);
/* 1062 */     a(☃, bwf1, 7, 6, 7, 7, 7, 7, blc3, blc3, false);
/* 1063 */     a(☃, bwf1, 5, 13, 12, 7, 13, 12, bct.a.p(), bct.a.p(), false);
/*      */ 
/*      */     
/* 1066 */     a(☃, bwf1, 2, 5, 2, 3, 5, 3, bct.dX.p(), bct.dX.p(), false);
/* 1067 */     a(☃, bwf1, 2, 5, 9, 3, 5, 10, bct.dX.p(), bct.dX.p(), false);
/* 1068 */     a(☃, bwf1, 2, 5, 4, 2, 5, 8, bct.dX.p(), bct.dX.p(), false);
/* 1069 */     a(☃, bwf1, 9, 5, 2, 10, 5, 3, bct.dX.p(), bct.dX.p(), false);
/* 1070 */     a(☃, bwf1, 9, 5, 9, 10, 5, 10, bct.dX.p(), bct.dX.p(), false);
/* 1071 */     a(☃, bwf1, 10, 5, 4, 10, 5, 8, bct.dX.p(), bct.dX.p(), false);
/* 1072 */     blc blc6 = blc5.a(bhx.a, eq.f);
/* 1073 */     blc blc7 = blc5.a(bhx.a, eq.e);
/* 1074 */     a(☃, blc7, 4, 5, 2, bwf1);
/* 1075 */     a(☃, blc7, 4, 5, 3, bwf1);
/* 1076 */     a(☃, blc7, 4, 5, 9, bwf1);
/* 1077 */     a(☃, blc7, 4, 5, 10, bwf1);
/* 1078 */     a(☃, blc6, 8, 5, 2, bwf1);
/* 1079 */     a(☃, blc6, 8, 5, 3, bwf1);
/* 1080 */     a(☃, blc6, 8, 5, 9, bwf1);
/* 1081 */     a(☃, blc6, 8, 5, 10, bwf1);
/*      */ 
/*      */     
/* 1084 */     a(☃, bwf1, 3, 4, 4, 4, 4, 8, bct.df.p(), bct.df.p(), false);
/* 1085 */     a(☃, bwf1, 8, 4, 4, 9, 4, 8, bct.df.p(), bct.df.p(), false);
/* 1086 */     a(☃, bwf1, 3, 5, 4, 4, 5, 8, bct.ea.p(), bct.ea.p(), false);
/* 1087 */     a(☃, bwf1, 8, 5, 4, 9, 5, 8, bct.ea.p(), bct.ea.p(), false);
/*      */ 
/*      */     
/* 1090 */     a(☃, bwf1, 4, 2, 0, 8, 2, 12, bct.dX.p(), bct.dX.p(), false);
/* 1091 */     a(☃, bwf1, 0, 2, 4, 12, 2, 8, bct.dX.p(), bct.dX.p(), false);
/*      */     
/* 1093 */     a(☃, bwf1, 4, 0, 0, 8, 1, 3, bct.dX.p(), bct.dX.p(), false);
/* 1094 */     a(☃, bwf1, 4, 0, 9, 8, 1, 12, bct.dX.p(), bct.dX.p(), false);
/* 1095 */     a(☃, bwf1, 0, 0, 4, 3, 1, 8, bct.dX.p(), bct.dX.p(), false);
/* 1096 */     a(☃, bwf1, 9, 0, 4, 12, 1, 8, bct.dX.p(), bct.dX.p(), false);
/*      */     int n;
/* 1098 */     for (n = 4; n <= 8; n++) {
/* 1099 */       for (int i1 = 0; i1 <= 2; i1++) {
/* 1100 */         b(☃, bct.dX.p(), n, -1, i1, bwf1);
/* 1101 */         b(☃, bct.dX.p(), n, -1, 12 - i1, bwf1);
/*      */       } 
/*      */     } 
/* 1104 */     for (n = 0; n <= 2; n++) {
/* 1105 */       for (int i1 = 4; i1 <= 8; i1++) {
/* 1106 */         b(☃, bct.dX.p(), n, -1, i1, bwf1);
/* 1107 */         b(☃, bct.dX.p(), 12 - n, -1, i1, bwf1);
/*      */       } 
/*      */     } 
/*      */     
/* 1111 */     return true;
/*      */   }
/*      */ }


/* Location:              F:\dw\server.jar!\bwr$k.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */