/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class g
/*     */   extends bxh.o
/*     */ {
/*     */   private boolean a;
/*     */   
/*     */   public g() {}
/*     */   
/*     */   public g(bxh.k ☃, int i, Random random, bwf bwf1, eq eq1) {
/* 772 */     super(☃, i);
/*     */     
/* 774 */     a(eq1);
/* 775 */     this.n = bwf1;
/* 776 */     this.a = random.nextBoolean();
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃) {
/* 781 */     super.a(☃);
/* 782 */     ☃.a("Terrace", this.a);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃, bxm bxm1) {
/* 787 */     super.a(☃, bxm1);
/* 788 */     this.a = ☃.q("Terrace");
/*     */   }
/*     */   
/*     */   public static g a(bxh.k ☃, List<bxb> list, Random random, int i, int j, int m, eq eq1, int n) {
/* 792 */     bwf bwf = bwf.a(i, j, m, 0, 0, 0, 5, 6, 5, eq1);
/*     */     
/* 794 */     if (bxb.a(list, bwf) != null) {
/* 795 */       return null;
/*     */     }
/*     */     
/* 798 */     return new g(☃, n, random, bwf, eq1);
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 803 */     if (this.f < 0) {
/* 804 */       this.f = a(☃, bwf1);
/* 805 */       if (this.f < 0) {
/* 806 */         return true;
/*     */       }
/* 808 */       this.n.a(0, this.f - this.n.e + 6 - 1, 0);
/*     */     } 
/*     */     
/* 811 */     blc blc1 = a(bct.m.p());
/* 812 */     blc blc2 = a(bct.n.p());
/* 813 */     blc blc3 = a(bct.cB.p().a(bhx.a, eq.c));
/* 814 */     blc blc4 = a(bct.J.p());
/* 815 */     blc blc5 = a(bct.cX.p());
/*     */ 
/*     */     
/* 818 */     a(☃, bwf1, 0, 0, 0, 4, 0, 4, blc1, blc1, false);
/*     */     
/* 820 */     a(☃, bwf1, 0, 4, 0, 4, 4, 4, blc4, blc4, false);
/* 821 */     a(☃, bwf1, 1, 4, 1, 3, 4, 3, blc2, blc2, false);
/*     */ 
/*     */     
/* 824 */     a(☃, blc1, 0, 1, 0, bwf1);
/* 825 */     a(☃, blc1, 0, 2, 0, bwf1);
/* 826 */     a(☃, blc1, 0, 3, 0, bwf1);
/* 827 */     a(☃, blc1, 4, 1, 0, bwf1);
/* 828 */     a(☃, blc1, 4, 2, 0, bwf1);
/* 829 */     a(☃, blc1, 4, 3, 0, bwf1);
/* 830 */     a(☃, blc1, 0, 1, 4, bwf1);
/* 831 */     a(☃, blc1, 0, 2, 4, bwf1);
/* 832 */     a(☃, blc1, 0, 3, 4, bwf1);
/* 833 */     a(☃, blc1, 4, 1, 4, bwf1);
/* 834 */     a(☃, blc1, 4, 2, 4, bwf1);
/* 835 */     a(☃, blc1, 4, 3, 4, bwf1);
/* 836 */     a(☃, bwf1, 0, 1, 1, 0, 3, 3, blc2, blc2, false);
/* 837 */     a(☃, bwf1, 4, 1, 1, 4, 3, 3, blc2, blc2, false);
/* 838 */     a(☃, bwf1, 1, 1, 4, 3, 3, 4, blc2, blc2, false);
/* 839 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 0, 2, 2, bwf1);
/* 840 */     a(☃, bct.dG.p().a(bez.b, Boolean.valueOf(true)).a(bez.o, Boolean.valueOf(true)), 2, 2, 4, bwf1);
/* 841 */     a(☃, bct.dG.p().a(bez.c, Boolean.valueOf(true)).a(bez.a, Boolean.valueOf(true)), 4, 2, 2, bwf1);
/*     */ 
/*     */     
/* 844 */     a(☃, blc2, 1, 1, 0, bwf1);
/* 845 */     a(☃, blc2, 1, 2, 0, bwf1);
/* 846 */     a(☃, blc2, 1, 3, 0, bwf1);
/* 847 */     a(☃, blc2, 2, 3, 0, bwf1);
/* 848 */     a(☃, blc2, 3, 3, 0, bwf1);
/* 849 */     a(☃, blc2, 3, 2, 0, bwf1);
/* 850 */     a(☃, blc2, 3, 1, 0, bwf1);
/* 851 */     if (a(☃, 2, 0, -1, bwf1).f() && !a(☃, 2, -1, -1, bwf1).f()) {
/* 852 */       a(☃, blc3, 2, 0, -1, bwf1);
/* 853 */       if (a(☃, 2, -1, -1, bwf1).c() == bct.if) {
/* 854 */         a(☃, bct.i.p(), 2, -1, -1, bwf1);
/*     */       }
/*     */     } 
/*     */ 
/*     */     
/* 859 */     a(☃, bwf1, 1, 1, 1, 3, 3, 3, bct.a.p(), bct.a.p(), false);
/*     */ 
/*     */     
/* 862 */     if (this.a) {
/* 863 */       int j = 0;
/* 864 */       int k = 4;
/*     */       
/* 866 */       for (int m = 0; m <= 4; m++) {
/* 867 */         for (int n = 0; n <= 4; n++) {
/* 868 */           boolean bool1 = (m == 0 || m == 4);
/* 869 */           boolean bool2 = (n == 0 || n == 4);
/*     */           
/* 871 */           if (bool1 || bool2) {
/* 872 */             boolean bool3 = (m == 0 || m == 4);
/* 873 */             boolean bool4 = (n == 0 || n == 4);
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */             
/* 879 */             blc blc = blc5.a(ber.c, Boolean.valueOf((bool3 && n != 0))).a(ber.a, Boolean.valueOf((bool3 && n != 4))).a(ber.o, Boolean.valueOf((bool4 && m != 0))).a(ber.b, Boolean.valueOf((bool4 && m != 4)));
/*     */             
/* 881 */             a(☃, blc, m, 5, n, bwf1);
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 888 */     if (this.a) {
/* 889 */       blc blc = bct.cz.p().a(bfq.a, eq.d);
/* 890 */       a(☃, blc, 3, 1, 3, bwf1);
/* 891 */       a(☃, blc, 3, 2, 3, bwf1);
/* 892 */       a(☃, blc, 3, 3, 3, bwf1);
/* 893 */       a(☃, blc, 3, 4, 3, bwf1);
/*     */     } 
/*     */ 
/*     */     
/* 897 */     a(☃, eq.c, 2, 3, 1, bwf1);
/*     */     
/* 899 */     for (int i = 0; i < 5; i++) {
/* 900 */       for (int j = 0; j < 5; j++) {
/* 901 */         a(☃, j, 6, i, bwf1);
/* 902 */         b(☃, blc1, j, -1, i, bwf1);
/*     */       } 
/*     */     } 
/*     */     
/* 906 */     a(☃, bwf1, 1, 1, 2, 1);
/*     */     
/* 908 */     return true;
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bxh$g.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */