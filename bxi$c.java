/*     */ import com.google.common.collect.Lists;
/*     */ import java.util.Collections;
/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ import javax.annotation.Nullable;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ class c
/*     */ {
/*     */   private final Random a;
/*     */   private final bxi.g b;
/*     */   private final bxi.g c;
/*     */   private final bxi.g[] d;
/*     */   private final int e;
/*     */   private final int f;
/*     */   
/*     */   public c(Random ☃) {
/* 717 */     this.a = ☃;
/*     */     
/* 719 */     int i = 11;
/* 720 */     this.e = 7;
/* 721 */     this.f = 4;
/*     */     
/* 723 */     this.b = new bxi.g(11, 11, 5);
/* 724 */     this.b.a(this.e, this.f, this.e + 1, this.f + 1, 3);
/* 725 */     this.b.a(this.e - 1, this.f, this.e - 1, this.f + 1, 2);
/* 726 */     this.b.a(this.e + 2, this.f - 2, this.e + 3, this.f + 3, 5);
/* 727 */     this.b.a(this.e + 1, this.f - 2, this.e + 1, this.f - 1, 1);
/* 728 */     this.b.a(this.e + 1, this.f + 2, this.e + 1, this.f + 3, 1);
/* 729 */     this.b.a(this.e - 1, this.f - 1, 1);
/* 730 */     this.b.a(this.e - 1, this.f + 2, 1);
/*     */     
/* 732 */     this.b.a(0, 0, 11, 1, 5);
/* 733 */     this.b.a(0, 9, 11, 11, 5);
/*     */     
/* 735 */     a(this.b, this.e, this.f - 2, eq.e, 6);
/* 736 */     a(this.b, this.e, this.f + 3, eq.e, 6);
/* 737 */     a(this.b, this.e - 2, this.f - 1, eq.e, 3);
/* 738 */     a(this.b, this.e - 2, this.f + 2, eq.e, 3);
/* 739 */     while (a(this.b));
/*     */ 
/*     */     
/* 742 */     this.d = new bxi.g[3];
/* 743 */     this.d[0] = new bxi.g(11, 11, 5);
/* 744 */     this.d[1] = new bxi.g(11, 11, 5);
/* 745 */     this.d[2] = new bxi.g(11, 11, 5);
/* 746 */     a(this.b, this.d[0]);
/* 747 */     a(this.b, this.d[1]);
/*     */ 
/*     */     
/* 750 */     this.d[0].a(this.e + 1, this.f, this.e + 1, this.f + 1, 8388608);
/* 751 */     this.d[1].a(this.e + 1, this.f, this.e + 1, this.f + 1, 8388608);
/*     */     
/* 753 */     this.c = new bxi.g(bxi.g.b(this.b), bxi.g.a(this.b), 5);
/* 754 */     b();
/* 755 */     a(this.c, this.d[2]);
/*     */   }
/*     */   
/*     */   public static boolean a(bxi.g ☃, int i, int j) {
/* 759 */     int k = ☃.a(i, j);
/* 760 */     return (k == 1 || k == 2 || k == 3 || k == 4);
/*     */   }
/*     */   
/*     */   public boolean a(bxi.g ☃, int i, int j, int k, int m) {
/* 764 */     return ((this.d[k].a(i, j) & 0xFFFF) == m);
/*     */   }
/*     */   
/*     */   @Nullable
/*     */   public eq b(bxi.g ☃, int i, int j, int k, int m) {
/* 769 */     for (eq eq : eq.c.a) {
/* 770 */       if (a(☃, i + eq.g(), j + eq.i(), k, m)) {
/* 771 */         return eq;
/*     */       }
/*     */     } 
/* 774 */     return null;
/*     */   }
/*     */   
/*     */   private void a(bxi.g ☃, int i, int j, eq eq1, int k) {
/* 778 */     if (k <= 0) {
/*     */       return;
/*     */     }
/*     */     
/* 782 */     ☃.a(i, j, 1);
/* 783 */     ☃.a(i + eq1.g(), j + eq1.i(), 0, 1);
/*     */     
/* 785 */     for (int m = 0; m < 8; m++) {
/* 786 */       eq eq4 = eq.b(this.a.nextInt(4));
/* 787 */       if (eq4 != eq1.d())
/*     */       {
/*     */         
/* 790 */         if (eq4 != eq.f || !this.a.nextBoolean()) {
/*     */ 
/*     */ 
/*     */           
/* 794 */           int n = i + eq1.g();
/* 795 */           int i1 = j + eq1.i();
/* 796 */           if (☃.a(n + eq4.g(), i1 + eq4.i()) == 0 && ☃.a(n + eq4.g() * 2, i1 + eq4.i() * 2) == 0) {
/* 797 */             a(☃, i + eq1.g() + eq4.g(), j + eq1.i() + eq4.i(), eq4, k - 1); break;
/*     */           } 
/*     */         }  } 
/*     */     } 
/* 801 */     eq eq2 = eq1.e();
/* 802 */     eq eq3 = eq1.f();
/* 803 */     ☃.a(i + eq2.g(), j + eq2.i(), 0, 2);
/* 804 */     ☃.a(i + eq3.g(), j + eq3.i(), 0, 2);
/*     */     
/* 806 */     ☃.a(i + eq1.g() + eq2.g(), j + eq1.i() + eq2.i(), 0, 2);
/* 807 */     ☃.a(i + eq1.g() + eq3.g(), j + eq1.i() + eq3.i(), 0, 2);
/* 808 */     ☃.a(i + eq1.g() * 2, j + eq1.i() * 2, 0, 2);
/* 809 */     ☃.a(i + eq2.g() * 2, j + eq2.i() * 2, 0, 2);
/* 810 */     ☃.a(i + eq3.g() * 2, j + eq3.i() * 2, 0, 2);
/*     */   }
/*     */   
/*     */   private boolean a(bxi.g ☃) {
/* 814 */     boolean bool = false;
/* 815 */     for (int i = 0; i < bxi.g.a(☃); i++) {
/* 816 */       for (int j = 0; j < bxi.g.b(☃); j++) {
/* 817 */         if (☃.a(j, i) == 0) {
/* 818 */           int k = 0;
/* 819 */           k += a(☃, j + 1, i) ? 1 : 0;
/* 820 */           k += a(☃, j - 1, i) ? 1 : 0;
/* 821 */           k += a(☃, j, i + 1) ? 1 : 0;
/* 822 */           k += a(☃, j, i - 1) ? 1 : 0;
/*     */           
/* 824 */           if (k >= 3) {
/*     */             
/* 826 */             ☃.a(j, i, 2);
/* 827 */             bool = true;
/* 828 */           } else if (k == 2) {
/*     */             
/* 830 */             int m = 0;
/* 831 */             m += a(☃, j + 1, i + 1) ? 1 : 0;
/* 832 */             m += a(☃, j - 1, i + 1) ? 1 : 0;
/* 833 */             m += a(☃, j + 1, i - 1) ? 1 : 0;
/* 834 */             m += a(☃, j - 1, i - 1) ? 1 : 0;
/* 835 */             if (m <= 1) {
/* 836 */               ☃.a(j, i, 2);
/* 837 */               bool = true;
/*     */             } 
/*     */           } 
/*     */         } 
/*     */       } 
/*     */     } 
/* 843 */     return bool;
/*     */   }
/*     */ 
/*     */   
/*     */   private void b() {
/* 848 */     List<xx<Integer, Integer>> ☃ = Lists.newArrayList();
/* 849 */     bxi.g g1 = this.d[1];
/* 850 */     for (int i = 0; i < bxi.g.a(this.c); i++) {
/* 851 */       for (int i1 = 0; i1 < bxi.g.b(this.c); i1++) {
/* 852 */         int i2 = g1.a(i1, i);
/* 853 */         int i3 = i2 & 0xF0000;
/* 854 */         if (i3 == 131072 && (i2 & 0x200000) == 2097152) {
/* 855 */           ☃.add(new xx<>(Integer.valueOf(i1), Integer.valueOf(i)));
/*     */         }
/*     */       } 
/*     */     } 
/*     */     
/* 860 */     if (☃.isEmpty()) {
/*     */       
/* 862 */       this.c.a(0, 0, bxi.g.b(this.c), bxi.g.a(this.c), 5);
/*     */       
/*     */       return;
/*     */     } 
/* 866 */     xx<Integer, Integer> xx = ☃.get(this.a.nextInt(☃.size()));
/* 867 */     int j = g1.a(((Integer)xx.a()).intValue(), ((Integer)xx.b()).intValue());
/* 868 */     g1.a(((Integer)xx.a()).intValue(), ((Integer)xx.b()).intValue(), j | 0x400000);
/* 869 */     eq eq1 = b(this.b, ((Integer)xx.a()).intValue(), ((Integer)xx.b()).intValue(), 1, j & 0xFFFF);
/* 870 */     int k = ((Integer)xx.a()).intValue() + eq1.g();
/* 871 */     int m = ((Integer)xx.b()).intValue() + eq1.i();
/*     */     
/* 873 */     for (int n = 0; n < bxi.g.a(this.c); n++) {
/* 874 */       for (int i1 = 0; i1 < bxi.g.b(this.c); i1++) {
/* 875 */         if (!a(this.b, i1, n)) {
/* 876 */           this.c.a(i1, n, 5);
/* 877 */         } else if (i1 == ((Integer)xx.a()).intValue() && n == ((Integer)xx.b()).intValue()) {
/* 878 */           this.c.a(i1, n, 3);
/* 879 */         } else if (i1 == k && n == m) {
/* 880 */           this.c.a(i1, n, 3);
/* 881 */           this.d[2].a(i1, n, 8388608);
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 886 */     List<eq> list = Lists.newArrayList();
/* 887 */     for (eq eq : eq.c.a) {
/* 888 */       if (this.c.a(k + eq.g(), m + eq.i()) == 0) {
/* 889 */         list.add(eq);
/*     */       }
/*     */     } 
/*     */     
/* 893 */     if (list.isEmpty()) {
/*     */       
/* 895 */       this.c.a(0, 0, bxi.g.b(this.c), bxi.g.a(this.c), 5);
/* 896 */       g1.a(((Integer)xx.a()).intValue(), ((Integer)xx.b()).intValue(), j);
/*     */       return;
/*     */     } 
/* 899 */     eq eq2 = list.get(this.a.nextInt(list.size()));
/* 900 */     a(this.c, k + eq2.g(), m + eq2.i(), eq2, 4);
/* 901 */     while (a(this.c));
/*     */   }
/*     */ 
/*     */   
/*     */   private void a(bxi.g ☃, bxi.g g1) {
/* 906 */     List<xx<Integer, Integer>> list = Lists.newArrayList(); int i;
/* 907 */     for (i = 0; i < bxi.g.a(☃); i++) {
/* 908 */       for (int j = 0; j < bxi.g.b(☃); j++) {
/* 909 */         if (☃.a(j, i) == 2) {
/* 910 */           list.add(new xx<>(Integer.valueOf(j), Integer.valueOf(i)));
/*     */         }
/*     */       } 
/*     */     } 
/* 914 */     Collections.shuffle(list, this.a);
/*     */     
/* 916 */     i = 10;
/* 917 */     for (xx<Integer, Integer> xx : list) {
/* 918 */       int j = ((Integer)xx.a()).intValue();
/* 919 */       int k = ((Integer)xx.b()).intValue();
/*     */       
/* 921 */       if (g1.a(j, k) == 0) {
/* 922 */         int m = j;
/* 923 */         int n = j;
/* 924 */         int i1 = k;
/* 925 */         int i2 = k;
/* 926 */         int i3 = 65536;
/* 927 */         if (g1.a(j + 1, k) == 0 && g1.a(j, k + 1) == 0 && g1.a(j + 1, k + 1) == 0 && ☃
/* 928 */           .a(j + 1, k) == 2 && ☃.a(j, k + 1) == 2 && ☃.a(j + 1, k + 1) == 2) {
/*     */           
/* 930 */           n++;
/* 931 */           i2++;
/* 932 */           i3 = 262144;
/* 933 */         } else if (g1.a(j - 1, k) == 0 && g1.a(j, k + 1) == 0 && g1.a(j - 1, k + 1) == 0 && ☃
/* 934 */           .a(j - 1, k) == 2 && ☃.a(j, k + 1) == 2 && ☃.a(j - 1, k + 1) == 2) {
/*     */           
/* 936 */           m--;
/* 937 */           i2++;
/* 938 */           i3 = 262144;
/* 939 */         } else if (g1.a(j - 1, k) == 0 && g1.a(j, k - 1) == 0 && g1.a(j - 1, k - 1) == 0 && ☃
/* 940 */           .a(j - 1, k) == 2 && ☃.a(j, k - 1) == 2 && ☃.a(j - 1, k - 1) == 2) {
/*     */           
/* 942 */           m--;
/* 943 */           i1--;
/* 944 */           i3 = 262144;
/* 945 */         } else if (g1.a(j + 1, k) == 0 && ☃.a(j + 1, k) == 2) {
/* 946 */           n++;
/* 947 */           i3 = 131072;
/* 948 */         } else if (g1.a(j, k + 1) == 0 && ☃.a(j, k + 1) == 2) {
/* 949 */           i2++;
/* 950 */           i3 = 131072;
/* 951 */         } else if (g1.a(j - 1, k) == 0 && ☃.a(j - 1, k) == 2) {
/* 952 */           m--;
/* 953 */           i3 = 131072;
/* 954 */         } else if (g1.a(j, k - 1) == 0 && ☃.a(j, k - 1) == 2) {
/* 955 */           i1--;
/* 956 */           i3 = 131072;
/*     */         } 
/*     */ 
/*     */         
/* 960 */         int i4 = this.a.nextBoolean() ? m : n;
/* 961 */         int i5 = this.a.nextBoolean() ? i1 : i2;
/* 962 */         int i6 = 2097152;
/* 963 */         if (!☃.b(i4, i5, 1)) {
/* 964 */           i4 = (i4 == m) ? n : m;
/* 965 */           i5 = (i5 == i1) ? i2 : i1;
/* 966 */           if (!☃.b(i4, i5, 1)) {
/* 967 */             i5 = (i5 == i1) ? i2 : i1;
/* 968 */             if (!☃.b(i4, i5, 1)) {
/* 969 */               i4 = (i4 == m) ? n : m;
/* 970 */               i5 = (i5 == i1) ? i2 : i1;
/* 971 */               if (!☃.b(i4, i5, 1)) {
/*     */                 
/* 973 */                 i6 = 0;
/* 974 */                 i4 = m;
/* 975 */                 i5 = i1;
/*     */               } 
/*     */             } 
/*     */           } 
/*     */         } 
/* 980 */         for (int i7 = i1; i7 <= i2; i7++) {
/* 981 */           for (int i8 = m; i8 <= n; i8++) {
/* 982 */             if (i8 == i4 && i7 == i5) {
/* 983 */               g1.a(i8, i7, 0x100000 | i6 | i3 | i);
/*     */             } else {
/* 985 */               g1.a(i8, i7, i3 | i);
/*     */             } 
/*     */           } 
/*     */         } 
/*     */         
/* 990 */         i++;
/*     */       } 
/*     */     } 
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bxi$c.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */