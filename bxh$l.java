/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class l
/*     */   extends bxh.p
/*     */ {
/*     */   private int a;
/*     */   
/*     */   public l() {}
/*     */   
/*     */   public l(bxh.k ☃, int i, Random random, bwf bwf1, eq eq1) {
/* 605 */     super(☃, i);
/*     */     
/* 607 */     a(eq1);
/* 608 */     this.n = bwf1;
/* 609 */     this.a = Math.max(bwf1.c(), bwf1.e());
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃) {
/* 614 */     super.a(☃);
/* 615 */     ☃.b("Length", this.a);
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃, bxm bxm1) {
/* 620 */     super.a(☃, bxm1);
/* 621 */     this.a = ☃.h("Length");
/*     */   }
/*     */ 
/*     */   
/*     */   public void a(bxb ☃, List<bxb> list, Random random) {
/* 626 */     boolean bool = false;
/*     */ 
/*     */     
/* 629 */     int i = random.nextInt(5);
/* 630 */     while (i < this.a - 8) {
/* 631 */       bxb bxb1 = a((bxh.k)☃, list, random, 0, i);
/* 632 */       if (bxb1 != null) {
/* 633 */         i += Math.max(bxb1.n.c(), bxb1.n.e());
/* 634 */         bool = true;
/*     */       } 
/* 636 */       i += 2 + random.nextInt(5);
/*     */     } 
/*     */ 
/*     */     
/* 640 */     i = random.nextInt(5);
/* 641 */     while (i < this.a - 8) {
/* 642 */       bxb bxb1 = b((bxh.k)☃, list, random, 0, i);
/* 643 */       if (bxb1 != null) {
/* 644 */         i += Math.max(bxb1.n.c(), bxb1.n.e());
/* 645 */         bool = true;
/*     */       } 
/* 647 */       i += 2 + random.nextInt(5);
/*     */     } 
/*     */     
/* 650 */     eq eq = f();
/* 651 */     if (bool && random.nextInt(3) > 0 && eq != null) {
/* 652 */       switch (bxh.null.a[eq.ordinal()]) {
/*     */         
/*     */         default:
/* 655 */           bxh.b((bxh.k)☃, list, random, this.n.a - 1, this.n.b, this.n.c, eq.e, e());
/*     */           break;
/*     */         case 2:
/* 658 */           bxh.b((bxh.k)☃, list, random, this.n.a - 1, this.n.b, this.n.f - 2, eq.e, e());
/*     */           break;
/*     */         case 4:
/* 661 */           bxh.b((bxh.k)☃, list, random, this.n.d - 2, this.n.b, this.n.c - 1, eq.c, e());
/*     */           break;
/*     */         case 3:
/* 664 */           bxh.b((bxh.k)☃, list, random, this.n.a, this.n.b, this.n.c - 1, eq.c, e());
/*     */           break;
/*     */       } 
/*     */     }
/* 668 */     if (bool && random.nextInt(3) > 0 && eq != null) {
/* 669 */       switch (bxh.null.a[eq.ordinal()]) {
/*     */         
/*     */         default:
/* 672 */           bxh.b((bxh.k)☃, list, random, this.n.d + 1, this.n.b, this.n.c, eq.f, e());
/*     */           return;
/*     */         case 2:
/* 675 */           bxh.b((bxh.k)☃, list, random, this.n.d + 1, this.n.b, this.n.f - 2, eq.f, e());
/*     */           return;
/*     */         case 4:
/* 678 */           bxh.b((bxh.k)☃, list, random, this.n.d - 2, this.n.b, this.n.f + 1, eq.d, e()); return;
/*     */         case 3:
/*     */           break;
/* 681 */       }  bxh.b((bxh.k)☃, list, random, this.n.a, this.n.b, this.n.f + 1, eq.d, e());
/*     */     } 
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public static bwf a(bxh.k ☃, List<bxb> list, Random random, int i, int j, int m, eq eq1) {
/* 688 */     int n = 7 * xq.a(random, 3, 5);
/*     */     
/* 690 */     while (n >= 7) {
/* 691 */       bwf bwf = bwf.a(i, j, m, 0, 0, 0, 3, 3, n, eq1);
/*     */       
/* 693 */       if (bxb.a(list, bwf) == null) {
/* 694 */         return bwf;
/*     */       }
/* 696 */       n -= 7;
/*     */     } 
/*     */     
/* 699 */     return null;
/*     */   }
/*     */ 
/*     */   
/*     */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 704 */     blc blc1 = a(bct.if.p());
/* 705 */     blc blc2 = a(bct.n.p());
/* 706 */     blc blc3 = a(bct.F.p());
/* 707 */     blc blc4 = a(bct.m.p());
/*     */     
/* 709 */     el.a a = new el.a();
/*     */     
/* 711 */     this.n.b = 1000;
/* 712 */     this.n.e = 0;
/*     */     
/* 714 */     for (int i = this.n.a; i <= this.n.d; i++) {
/* 715 */       for (int j = this.n.c; j <= this.n.f; j++) {
/* 716 */         a.c(i, 64, j);
/* 717 */         if (bwf1.b(a)) {
/* 718 */           int k = ☃.a(bor.a.e, a.o(), a.q());
/* 719 */           a.c(a.o(), k, a.q()).c(eq.a);
/* 720 */           if (a.p() < ☃.k()) {
/* 721 */             a.p(☃.k() - 1);
/*     */           }
/* 723 */           while (a.p() >= ☃.k() - 1) {
/* 724 */             blc blc = ☃.a_(a);
/* 725 */             bcs bcs = blc.c();
/* 726 */             if (bcs == bct.i && ☃.c(a.a())) {
/* 727 */               ☃.a(a, blc1, 2); break;
/*     */             } 
/* 729 */             if (blc.d().a()) {
/* 730 */               ☃.a(new el(a), blc2, 2); break;
/*     */             } 
/* 732 */             if (bcs == bct.D || bcs == bct.E || bcs == bct.at || bcs == bct.au || bcs == bct.av || bcs == bct.hT || bcs == bct.au || bcs == bct.av) {
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */               
/* 741 */               ☃.a(a, blc3, 2);
/* 742 */               ☃.a(a.b(), blc4, 2);
/*     */               break;
/*     */             } 
/* 745 */             a.c(eq.a);
/*     */           } 
/*     */ 
/*     */ 
/*     */           
/* 750 */           this.n.b = Math.min(this.n.b, a.p());
/* 751 */           this.n.e = Math.max(this.n.e, a.p());
/*     */         } 
/*     */       } 
/*     */     } 
/*     */     
/* 756 */     return true;
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bxh$l.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */