/*     */ import java.util.List;
/*     */ import java.util.Random;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class l
/*     */   extends bwr.m
/*     */ {
/*     */   private boolean a;
/*     */   
/*     */   public l() {}
/*     */   
/*     */   public l(int ☃, Random random, bwf bwf1, eq eq1) {
/* 736 */     super(☃);
/*     */     
/* 738 */     a(eq1);
/* 739 */     this.n = bwf1;
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃, bxm bxm1) {
/* 744 */     super.a(☃, bxm1);
/*     */     
/* 746 */     this.a = ☃.q("Mob");
/*     */   }
/*     */ 
/*     */   
/*     */   protected void a(gy ☃) {
/* 751 */     super.a(☃);
/*     */     
/* 753 */     ☃.a("Mob", this.a);
/*     */   }
/*     */   
/*     */   public static l a(List<bxb> ☃, Random random, int i, int j, int k, int n, eq eq1) {
/* 757 */     bwf bwf = bwf.a(i, j, k, -2, 0, 0, 7, 8, 9, eq1);
/*     */     
/* 759 */     if (!a(bwf) || bxb.a(☃, bwf) != null) {
/* 760 */       return null;
/*     */     }
/*     */     
/* 763 */     return new l(n, random, bwf, eq1);
/*     */   }
/*     */ 
/*     */ 
/*     */   
/*     */   public boolean a(axz ☃, Random random, bwf bwf1, axm axm1) {
/* 769 */     a(☃, bwf1, 0, 2, 0, 6, 7, 7, bct.a.p(), bct.a.p(), false);
/*     */ 
/*     */     
/* 772 */     a(☃, bwf1, 1, 0, 0, 5, 1, 7, bct.dX.p(), bct.dX.p(), false);
/* 773 */     a(☃, bwf1, 1, 2, 1, 5, 2, 7, bct.dX.p(), bct.dX.p(), false);
/* 774 */     a(☃, bwf1, 1, 3, 2, 5, 3, 7, bct.dX.p(), bct.dX.p(), false);
/* 775 */     a(☃, bwf1, 1, 4, 3, 5, 4, 7, bct.dX.p(), bct.dX.p(), false);
/*     */ 
/*     */     
/* 778 */     a(☃, bwf1, 1, 2, 0, 1, 4, 2, bct.dX.p(), bct.dX.p(), false);
/* 779 */     a(☃, bwf1, 5, 2, 0, 5, 4, 2, bct.dX.p(), bct.dX.p(), false);
/* 780 */     a(☃, bwf1, 1, 5, 2, 1, 5, 3, bct.dX.p(), bct.dX.p(), false);
/* 781 */     a(☃, bwf1, 5, 5, 2, 5, 5, 3, bct.dX.p(), bct.dX.p(), false);
/* 782 */     a(☃, bwf1, 0, 5, 3, 0, 5, 8, bct.dX.p(), bct.dX.p(), false);
/* 783 */     a(☃, bwf1, 6, 5, 3, 6, 5, 8, bct.dX.p(), bct.dX.p(), false);
/* 784 */     a(☃, bwf1, 1, 5, 8, 5, 5, 8, bct.dX.p(), bct.dX.p(), false);
/*     */     
/* 786 */     blc blc1 = bct.dY.p().a(ber.o, Boolean.valueOf(true)).a(ber.b, Boolean.valueOf(true));
/* 787 */     blc blc2 = bct.dY.p().a(ber.a, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true));
/*     */     
/* 789 */     a(☃, bct.dY.p().a(ber.o, Boolean.valueOf(true)), 1, 6, 3, bwf1);
/* 790 */     a(☃, bct.dY.p().a(ber.b, Boolean.valueOf(true)), 5, 6, 3, bwf1);
/*     */     
/* 792 */     a(☃, bct.dY.p().a(ber.b, Boolean.valueOf(true)).a(ber.a, Boolean.valueOf(true)), 0, 6, 3, bwf1);
/* 793 */     a(☃, bct.dY.p().a(ber.o, Boolean.valueOf(true)).a(ber.a, Boolean.valueOf(true)), 6, 6, 3, bwf1);
/*     */     
/* 795 */     a(☃, bwf1, 0, 6, 4, 0, 6, 7, blc2, blc2, false);
/* 796 */     a(☃, bwf1, 6, 6, 4, 6, 6, 7, blc2, blc2, false);
/*     */     
/* 798 */     a(☃, bct.dY.p().a(ber.b, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true)), 0, 6, 8, bwf1);
/* 799 */     a(☃, bct.dY.p().a(ber.o, Boolean.valueOf(true)).a(ber.c, Boolean.valueOf(true)), 6, 6, 8, bwf1);
/*     */     
/* 801 */     a(☃, bwf1, 1, 6, 8, 5, 6, 8, blc1, blc1, false);
/*     */     
/* 803 */     a(☃, bct.dY.p().a(ber.b, Boolean.valueOf(true)), 1, 7, 8, bwf1);
/* 804 */     a(☃, bwf1, 2, 7, 8, 4, 7, 8, blc1, blc1, false);
/* 805 */     a(☃, bct.dY.p().a(ber.o, Boolean.valueOf(true)), 5, 7, 8, bwf1);
/*     */     
/* 807 */     a(☃, bct.dY.p().a(ber.b, Boolean.valueOf(true)), 2, 8, 8, bwf1);
/* 808 */     a(☃, blc1, 3, 8, 8, bwf1);
/* 809 */     a(☃, bct.dY.p().a(ber.o, Boolean.valueOf(true)), 4, 8, 8, bwf1);
/*     */     
/* 811 */     if (!this.a) {
/* 812 */       el el = new el(a(3, 5), d(5), b(3, 5));
/* 813 */       if (bwf1.b(el)) {
/* 814 */         this.a = true;
/* 815 */         ☃.a(el, bct.ci.p(), 2);
/*     */         
/* 817 */         bji bji = ☃.f(el);
/* 818 */         if (bji instanceof bke) {
/* 819 */           ((bke)bji).c().a(aev.e);
/*     */         }
/*     */       } 
/*     */     } 
/*     */ 
/*     */     
/* 825 */     for (int i = 0; i <= 6; i++) {
/* 826 */       for (int j = 0; j <= 6; j++) {
/* 827 */         b(☃, bct.dX.p(), i, -1, j, bwf1);
/*     */       }
/*     */     } 
/*     */     
/* 831 */     return true;
/*     */   }
/*     */ }


/* Location:              F:\dw\server.jar!\bwr$l.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */